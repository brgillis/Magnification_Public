{"name":"Magnification public","tagline":"Public release of magnification-measuring code used for Gillis and Taylor (2015)","body":"# README #\r\n\r\nThis is a pre-release public posting of the code used for Gillis and Taylor (2015), available at\r\nhttp://arxiv.org/abs/1507.01858.\r\n\r\n### What is this repository for? ###\r\n\r\n* Code used for Gillis and Taylor (2015), including a release of my C++ library, \"IceBRG\"\r\n* v1.0.0\r\n\r\n### How do I get set up? ###\r\n\r\n* Summary of set up\r\n\r\nThis project is set up with autotools, so it can be built from source on a Linux-like system with the standard:\r\n\r\n```\r\n#!bash\r\n\r\n./configure <options>\r\nmake <options>\r\nmake install\r\n```\r\n\r\nMy quick recommendation for options is:\r\n\r\n```\r\n#!bash\r\n\r\n./configure --enable-full-optimization (add --prefix=$HOME for a user-space install)\r\nmake -j8\r\nmake install\r\n```\r\n\r\nIf the configuration step fails, see below for relevant options that may help point to dependencies.\r\n\r\nYou can uninstall through:\r\n\r\n```\r\n#!bash\r\n\r\nmake uninstall\r\n```\r\n\r\nand clean up the installation directory through:\r\n\r\n```\r\n#!bash\r\n\r\nmake clean\r\n```\r\n\r\nThe executables will be installed in $PREFIX/bin, the needed python package will be installed in $PYTHONPREFIX/site-packages, and unless --disable-install-IceBRG is set, the libraries will be installed in $PREFIX/lib, and their headers in $PREFIX/include/cfhtlens_magnification.\r\n\r\n* Configuration\r\n\r\nRelevant configure options:\r\n\r\n\r\n```\r\n#!bash\r\n\r\n--help # View help and configure options\r\n--prefix=??? # Install in a particular directory. --prefix=$HOME will do install in userspace\r\n--disable-parallelization # Unless this flag is used, the executables will be installed using parallelization. With this, only one thread will be run at a time.\r\n--enable-full-optimization # Overrides default C++ compilation flags (-g -O2) and uses a recommended set for better optimization. I recommend using this unless you want to tweak the flags yourself.\r\n--with-boost=??? # Point to a specific location to find boost headers\r\n--with-boost-libdir=??? # Point to a specific location to find boost libraries\r\n--with-ccfits=??? # Point to a specific location to find CCfits headers\r\n--with-ccfits-libdir=??? # Point to a specific location to find the CCfits library\r\nCPPFLAGS=??? # Set specific preprocessor flags. For instance, CPPFLAGS='-I/path/to/Eigen/' to help find the Eigen headers.\r\n```\r\n\r\n\r\n* Dependencies\r\n\r\nC++11-compliant C++ compiler\r\nPython interpreter (tested on Python 2.7)\r\nBoost headers and Boost Serialization library (tested on v1.56)\r\nEigen 3 headers\r\nCCfits headers and library\r\nwcstools (needed at runtime for certain executables, but not needed at installation)\r\nfpack/funpack (as wcstools, only needed at runtime)\r\n\r\n* How to run tests\r\n\r\nOnce it's installed, you can run a test analysis through going to a directory where you want to store data, then running the series of commands:\r\n\r\n\r\n```\r\n#!bash\r\n\r\nCFHTLenS_Mag_get_fields.py\r\nCFHTLenS_Mag_get_masks.py\r\nCFHTLenS_Mag_filter_catalogues\r\nCFHTLenS_Mag_get_unmasked_fractions\r\nCFHTLenS_Mag_count_sources\r\nCFHTLenS_Mag_measure_weak_lensing\r\nCFHTLenS_Mag_fit_lensing_model\r\n\r\n```\r\n\r\nThis will run all necessary steps on the process up through fitting a lensing model to the data. By default, this only downloads one pointing from the CFHTLenS server (to lighten the load on it and speed things up for those only performing quick tests). A configure file (not distributed at the moment) may be used with the CFHTLenS_Mag_measure_weak_lensing step to modify the lens bins for which the lensing signal is measured.\r\n\r\n### Who do I talk to? ###\r\n\r\n* Bryan Gillis - repo owner","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}