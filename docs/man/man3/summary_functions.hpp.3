.TH "/disk2/brg/git/Magnification_Public/src/lib/IceBRG_main/vector/summary_functions.hpp" 3 "Thu Jul 9 2015" "Version 0.9.2" "CFHTLenS_Magnification" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/disk2/brg/git/Magnification_Public/src/lib/IceBRG_main/vector/summary_functions.hpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <vector>\fP
.br
\fC#include '\&.\&./container/is_stl_container\&.hpp'\fP
.br
\fC#include 'IceBRG_main/common\&.h'\fP
.br
\fC#include 'IceBRG_main/container/is_eigen_container\&.hpp'\fP
.br
\fC#include 'IceBRG_main/utility\&.hpp'\fP
.br
\fC#include 'IceBRG_main/vector/elementwise_functions\&.hpp'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBIceBRG\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T , typename std::enable_if<!IceBRG::is_stl_container< T >::value, char >::type  = 0, typename std::enable_if< IceBRG::is_eigen_container< T >::value, char >::type  = 0> T::Index \fBIceBRG::rsize\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< IceBRG::is_stl_container< T >::value, char >::type  = 0> \fBssize_t\fP \fBIceBRG::rsize\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if<!IceBRG::is_stl_container< T >::value, char >::type  = 0, typename std::enable_if<!IceBRG::is_eigen_container< T >::value, char >::type  = 0> T \fBIceBRG::sum\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< IceBRG::is_stl_container< T >::value, char >::type  = 0> T::value_type \fBIceBRG::sum\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if<!IceBRG::is_stl_container< T >::value, char >::type  = 0, typename std::enable_if< IceBRG::is_eigen_container< T >::value, char >::type  = 0> T::Scalar \fBIceBRG::product\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if<!IceBRG::is_stl_container< T >::value, char >::type  = 0, typename std::enable_if<!IceBRG::is_eigen_container< T >::value, char >::type  = 0> T \fBIceBRG::product\fP (const T v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< IceBRG::is_stl_container< T >::value, char >::type  = 0> T::value_type \fBIceBRG::product\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< IceBRG::is_stl_container< T >::value, char >::type  = 0> T::value_type \fBIceBRG::mean\fP (const std::vector< T > &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if<!IceBRG::is_stl_container< T >::value, char >::type  = 0, typename std::enable_if< IceBRG::is_eigen_container< T >::value, char >::type  = 0> T::Scalar \fBIceBRG::mean\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< IceBRG::is_stl_container< T >::value, char >::type  = 0> T::value_type \fBIceBRG::std\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< IceBRG::is_stl_container< T >::value, char >::type  = 0> T::value_type \fBIceBRG::stddev\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if<!IceBRG::is_stl_container< T >::value, char >::type  = 0, typename std::enable_if< IceBRG::is_eigen_container< T >::value, char >::type  = 0> T::Scalar \fBIceBRG::std\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if<!IceBRG::is_stl_container< T >::value, char >::type  = 0, typename std::enable_if< IceBRG::is_eigen_container< T >::value, char >::type  = 0> T::Scalar \fBIceBRG::stddev\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< IceBRG::is_stl_container< T >::value, char >::type  = 0> T::value_type \fBIceBRG::stderr\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if<!IceBRG::is_stl_container< T >::value, char >::type  = 0, typename std::enable_if< IceBRG::is_eigen_container< T >::value, char >::type  = 0> T::Scalar \fBIceBRG::stderr\fP (const T &v)"
.br
.ti -1c
.RI "template<typename InputIterator > bool \fBIceBRG::is_monotonically_increasing\fP (const InputIterator &first, const InputIterator &last)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< IceBRG::is_stl_container< T >::value||IceBRG::is_eigen_container< T >::value, char >::type  = 0> bool \fBIceBRG::is_monotonically_increasing\fP (const T &v)"
.br
.ti -1c
.RI "template<typename InputIterator > bool \fBIceBRG::is_monotonically_decreasing\fP (const InputIterator &first, const InputIterator &last)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< IceBRG::is_stl_container< T >::value||IceBRG::is_eigen_container< T >::value, char >::type  = 0> bool \fBIceBRG::is_monotonically_decreasing\fP (const T &v)"
.br
.ti -1c
.RI "bool \fBIceBRG::all_true\fP (const std::vector< bool > &vec)"
.br
.ti -1c
.RI "constexpr bool \fBIceBRG::all_true\fP (bool v)"
.br
.ti -1c
.RI "bool \fBIceBRG::all_false\fP (const std::vector< bool > &vec)"
.br
.ti -1c
.RI "constexpr bool \fBIceBRG::all_false\fP (const bool &v)"
.br
.ti -1c
.RI "bool \fBIceBRG::not_all_true\fP (const std::vector< bool > &v)"
.br
.ti -1c
.RI "constexpr bool \fBIceBRG::not_all_true\fP (const bool &v)"
.br
.ti -1c
.RI "bool \fBIceBRG::not_all_false\fP (const std::vector< bool > &v)"
.br
.ti -1c
.RI "constexpr bool \fBIceBRG::not_all_false\fP (bool v)"
.br
.ti -1c
.RI "bool \fBIceBRG::some_true_some_false\fP (const std::vector< bool > &v)"
.br
.ti -1c
.RI "constexpr bool \fBIceBRG::some_true_some_false\fP (const bool &v)"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for CFHTLenS_Magnification from the source code\&.
