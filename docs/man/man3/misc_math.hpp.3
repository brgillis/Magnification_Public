.TH "/disk2/brg/git/Magnification_Public/src/lib/IceBRG_main/math/misc_math.hpp" 3 "Thu Jul 9 2015" "Version 0.9.2" "CFHTLenS_Magnification" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/disk2/brg/git/Magnification_Public/src/lib/IceBRG_main/math/misc_math.hpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <cmath>\fP
.br
\fC#include <cstdlib>\fP
.br
\fC#include <limits>\fP
.br
\fC#include <stdexcept>\fP
.br
\fC#include <type_traits>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <boost/units/is_quantity\&.hpp>\fP
.br
\fC#include 'IceBRG_main/common\&.h'\fP
.br
\fC#include 'IceBRG_main/utility\&.hpp'\fP
.br
\fC#include 'IceBRG_main/container/is_container\&.hpp'\fP
.br
\fC#include 'IceBRG_main/units/units\&.hpp'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBIceBRG\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T , typename std::enable_if< std::numeric_limits< T >::has_quiet_NaN, T >::type *  = nullptr> bool \fBIceBRG::isnan\fP (const T &val)"
.br
.ti -1c
.RI "bool \fBIceBRG::isnan\fP (const std::string &val)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< std::numeric_limits< T >::has_infinity, T >::type *  = nullptr> bool \fBIceBRG::isinf\fP (T val)"
.br
.ti -1c
.RI "bool \fBIceBRG::isinf\fP (const std::string &val)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< !std::numeric_limits< T >::has_infinity, T >::type *  = nullptr> bool \fBIceBRG::isinf\fP (const T &val)"
.br
.ti -1c
.RI "template<typename T > bool \fBIceBRG::isbad\fP (const T &val)"
.br
.ti -1c
.RI "bool \fBIceBRG::isbad\fP (std::string &val)"
.br
.ti -1c
.RI "template<typename T > bool \fBIceBRG::isgood\fP (const T &val)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if<!boost::units::is_quantity< T >::value, char >::type  = 0> void \fBIceBRG::fixbad\fP (T &val)"
.br
.ti -1c
.RI "template<class T1 , class T2 , BRG_F_IS_NULL(T1) , BRG_F_IS_NULL(T2) > boost::tuples::null_type \fBIceBRG::min\fP (const T1 &t1, const T2 &t2)"
.br
.ti -1c
.RI "template<class T1 , class T2 , BRG_F_IS_NULL(T1) , BRG_F_IS_NULL(T2) > boost::tuples::null_type \fBIceBRG::max\fP (const T1 &t1, const T2 &t2)"
.br
.ti -1c
.RI "template<class T1 , class T2 , class T3 , BRG_F_NOT_CONTAINER(T1) , BRG_F_NOT_CONTAINER(T2) , BRG_F_NOT_CONTAINER(T3) > T2 \fBIceBRG::bound\fP (T1 &&lower_bound, T2 &&a, T3 &&upper_bound)"
.br
.ti -1c
.RI "template<class T > T & \fBIceBRG::min_ref\fP (T &a, T &b)"
.br
.ti -1c
.RI "template<class T > T & \fBIceBRG::max_ref\fP (T &a, T &b)"
.br
.ti -1c
.RI "template<typename Ta , typename Tb > bool \fBIceBRG::divisible\fP (const Ta &a, const Tb &b)"
.br
.ti -1c
.RI "\fBint_type\fP \fBIceBRG::round_int\fP (\fBflt_type\fP value, const \fBflt_type\fP &epsilon=std::numeric_limits< \fBflt_type\fP >::epsilon())"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_EIGEN_OR_SCALAR(T) > \fBIceBRG::decltype\fP (T()*T()) square(const T &v1)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_EIGEN_OR_SCALAR(T) > \fBIceBRG::decltype\fP (T()*square(T())) cube(const T &v1)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_EIGEN_OR_SCALAR(T) > \fBIceBRG::decltype\fP (square(T())*square(T())) quart(const T &v1)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_EIGEN_OR_SCALAR(T) > \fBIceBRG::decltype\fP (1/T()) inverse(const T &v1)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_EIGEN_OR_SCALAR(T) > \fBIceBRG::decltype\fP (inverse(square(T()))) inv_square(const T &v1)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_EIGEN_OR_SCALAR(T) > \fBIceBRG::decltype\fP (inverse(cube(T()))) inv_cube(const T &v1)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_EIGEN_OR_SCALAR(T) > \fBIceBRG::decltype\fP (inverse(quart(T()))) inv_quart(const T &v1)"
.br
.ti -1c
.RI "template<typename T , BRG_F_NOT_CONTAINER(T) > constexpr \fBshort_int_type\fP \fBIceBRG::sign\fP (const T &x, std::false_type is_signed)"
.br
.ti -1c
.RI "template<typename T , BRG_F_NOT_CONTAINER(T) > constexpr \fBshort_int_type\fP \fBIceBRG::sign\fP (const T &x, std::true_type is_signed)"
.br
.ti -1c
.RI "template<typename T , BRG_F_NOT_CONTAINER(T) > constexpr \fBshort_int_type\fP \fBIceBRG::sign\fP (const T &x)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_EIGEN_OR_SCALAR(T1) , BRG_F_IS_EIGEN_OR_SCALAR(T2) > T1 \fBIceBRG::quad_add\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , typename T3 , BRG_F_IS_EIGEN_OR_SCALAR(T1) , BRG_F_IS_EIGEN_OR_SCALAR(T2) , BRG_F_IS_EIGEN_OR_SCALAR(T3) > T1 \fBIceBRG::quad_add\fP (const T1 &v1, const T2 &v2, const T3 v3)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_EIGEN_OR_SCALAR(T1) , BRG_F_IS_EIGEN_OR_SCALAR(T2) > T1 \fBIceBRG::quad_sub\fP (const T1 &v1, const T2 v2)"
.br
.ti -1c
.RI "template<typename Tx1 , typename Ty1 , typename Tx2 , typename Ty2 , BRG_F_IS_EIGEN_OR_SCALAR(Tx1) , BRG_F_IS_EIGEN_OR_SCALAR(Ty1) , BRG_F_IS_EIGEN_OR_SCALAR(Tx2) , BRG_F_IS_EIGEN_OR_SCALAR(Ty2) > Tx1 \fBIceBRG::dist2d\fP (const Tx1 &x1, const Ty1 &y1, const Tx2 &x2, const Ty2 &y2)"
.br
.ti -1c
.RI "template<typename Tx1 , typename Ty1 , BRG_F_IS_EIGEN_OR_SCALAR(Tx1) , BRG_F_IS_EIGEN_OR_SCALAR(Ty1) > Tx1 \fBIceBRG::dist2d\fP (const Tx1 &x1, const Ty1 &y1)"
.br
.ti -1c
.RI "template<typename Tx1 , typename Ty1 , typename Ta1 , BRG_F_IS_EIGEN_OR_SCALAR(Tx1) , BRG_F_IS_EIGEN_OR_SCALAR(Ty1) , BRG_F_IS_EIGEN_OR_SCALAR(Ta1) > Tx1 \fBIceBRG::lc_add\fP (const Tx1 &x1, const Ty1 &y1, const Ta1 &a1)"
.br
.ti -1c
.RI "template<typename Tx1 , typename Ty1 , typename Tz1 , typename Tx2 , typename Ty2 , typename Tz2 , BRG_F_IS_EIGEN_OR_SCALAR(Tx1) , BRG_F_IS_EIGEN_OR_SCALAR(Ty1) , BRG_F_IS_EIGEN_OR_SCALAR(Tz1) , BRG_F_IS_EIGEN_OR_SCALAR(Tx2) , BRG_F_IS_EIGEN_OR_SCALAR(Ty2) , BRG_F_IS_EIGEN_OR_SCALAR(Tz2) > Tx1 \fBIceBRG::dist3d\fP (const Tx1 &x1, const Ty1 &y1, const Tz1 &z1, const Tx2 &x2, const Ty2 &y2, const Tz2 &z2)"
.br
.ti -1c
.RI "template<typename Tx1 , typename Ty1 , typename Tz1 , BRG_F_IS_EIGEN_OR_SCALAR(Tx1) , BRG_F_IS_EIGEN_OR_SCALAR(Ty1) , BRG_F_IS_EIGEN_OR_SCALAR(Tz1) > Tx1 \fBIceBRG::dist3d\fP (const Tx1 &x1, const Ty1 &y1, const Tz1 &z1)"
.br
.ti -1c
.RI "template<typename Ta , typename Tb , BRG_F_NOT_CONTAINER(Ta) , BRG_F_NOT_CONTAINER(Tb) > Ta \fBIceBRG::weighted_dist\fP (const std::vector< Ta > &a, const std::vector< Tb > &b)"
.br
.ti -1c
.RI "template<typename Ta , typename Tb , typename Tc , BRG_F_NOT_CONTAINER(Ta) , BRG_F_NOT_CONTAINER(Tb) , BRG_F_NOT_CONTAINER(Tc) > Ta \fBIceBRG::weighted_dist\fP (const std::vector< Ta > &a, const std::vector< Tb > &b, const std::vector< Tc > &c)"
.br
.ti -1c
.RI "template<typename Tx1 , typename Ty1 , typename Tz1 , typename Tx2 , typename Ty2 , typename Tz2 , BRG_F_IS_EIGEN_OR_SCALAR(Tx1) , BRG_F_IS_EIGEN_OR_SCALAR(Ty1) , BRG_F_IS_EIGEN_OR_SCALAR(Tz1) , BRG_F_IS_EIGEN_OR_SCALAR(Tx2) , BRG_F_IS_EIGEN_OR_SCALAR(Ty2) , BRG_F_IS_EIGEN_OR_SCALAR(Tz2) > Tx1 \fBIceBRG::dot_product\fP (const Tx1 &x1, const Ty1 &y1, const Tz1 &z1, const Tx2 &x2, const Ty2 &y2, const Tz2 &z2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NOT_CONTAINER(T1) , BRG_F_NOT_CONTAINER(T2) > T1 \fBIceBRG::dot_product\fP (const std::vector< T1 > &a, const std::vector< T2 > &b)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_EIGEN_OR_SCALAR(T1) , BRG_F_IS_EIGEN_OR_SCALAR(T2) > T1 \fBIceBRG::quad_add_err\fP (const T1 &v1, const T1 &v1_err, const T2 &v2, const T2 &v2_err)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , typename T3 , BRG_F_IS_EIGEN_OR_SCALAR(T1) , BRG_F_IS_EIGEN_OR_SCALAR(T2) , BRG_F_IS_EIGEN_OR_SCALAR(T3) > T1 \fBIceBRG::quad_add_err\fP (const T1 &v1, const T1 &v1_err, const T2 &v2, const T2 &v2_err, const T3 &v3, const T3 &v3_err)"
.br
.ti -1c
.RI "template<typename T1 , BRG_F_IS_EIGEN_OR_SCALAR(T1) > T1 \fBIceBRG::square_err\fP (T1 v, T1 v_err)"
.br
.ti -1c
.RI "template<typename T1 , BRG_F_IS_EIGEN_OR_SCALAR(T1) > T1 \fBIceBRG::sqrt_err\fP (const T1 &v, T1 v_err)"
.br
.ti -1c
.RI "template<typename T1 , BRG_F_IS_EIGEN_OR_SCALAR(T1) > T1 \fBIceBRG::pow_err\fP (const T1 &v, T1 v_err, const \fBlong_flt_type\fP &p)"
.br
.ti -1c
.RI "template<typename T1 , BRG_F_IS_EIGEN_OR_SCALAR(T1) > T1 \fBIceBRG::ipow_err\fP (const T1 &v, T1 v_err, \fBint_type\fP p)"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for CFHTLenS_Magnification from the source code\&.
