.TH "/disk2/brg/git/Magnification_Public/src/lib/IceBRG_main/units/units.hpp" 3 "Tue Jul 7 2015" "Version 0.9.0" "CFHTLenS_Magnification" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/disk2/brg/git/Magnification_Public/src/lib/IceBRG_main/units/units.hpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <cmath>\fP
.br
\fC#include 'IceBRG_main/common\&.h'\fP
.br
\fC#include 'IceBRG_main/container/is_boost_tuple\&.hpp'\fP
.br
\fC#include 'IceBRG_main/math/ipow\&.hpp'\fP
.br
\fC#include <boost/units/cmath\&.hpp>\fP
.br
\fC#include <boost/units/derived_dimension\&.hpp>\fP
.br
\fC#include <boost/units/is_quantity\&.hpp>\fP
.br
\fC#include <boost/units/systems/si\&.hpp>\fP
.br
\fC#include <boost/any\&.hpp>\fP
.br
\fC#include <boost/serialization/split_free\&.hpp>\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBIceBRG\fP"
.br
.ti -1c
.RI "namespace \fBboost\fP"
.br
.ti -1c
.RI "namespace \fBboost::serialization\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_BRG_USE_UNITS_\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef boost::any \fBIceBRG::any_units_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::dimensionless > \fBIceBRG::dimensionless_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::length > \fBIceBRG::distance_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::area > \fBIceBRG::area_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::wavenumber > \fBIceBRG::inverse_distance_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::time > \fBIceBRG::time_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::frequency > \fBIceBRG::inverse_time_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::mass > \fBIceBRG::mass_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::plane_angle > \fBIceBRG::angle_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::temperature > \fBIceBRG::temperature_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::velocity > \fBIceBRG::velocity_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::acceleration > \fBIceBRG::acceleration_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::mass_density > \fBIceBRG::density_type\fP"
.br
.ti -1c
.RI "typedef boost::units::quantity
.br
< boost::units::si::surface_density > \fBIceBRG::surface_density_type\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "typedef \fBIceBRG::decltype\fP (angle_type()*angle_type()) square_angle_type"
.br
.ti -1c
.RI "const auto \fBIceBRG::meter_per_second\fP (boost::units::si::meter/boost::units::si::second)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if<!std::is_same< T, any_units_type >::value &&boost::units::is_quantity< T >::value, char >::type  = 0> \fBflt_type\fP \fBIceBRG::value_of\fP (const T &x)"
.br
.ti -1c
.RI "template<typename Tstored , typename T , typename std::enable_if< std::is_same< T, any_units_type >::value, char >::type  = 0> \fBflt_type\fP \fBIceBRG::value_of\fP (const T &x)"
.br
.ti -1c
.RI "template<typename Tout , typename Tin , typename Tout_copy  = Tout, typename std::enable_if< boost::units::is_quantity< Tout_copy >::value, char >::type  = 0> Tout \fBIceBRG::units_cast\fP (const Tin &x)"
.br
.ti -1c
.RI "template<typename Tout , typename Tin > any_units_type \fBIceBRG::any_units_cast\fP (const Tin &x)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> T \fBIceBRG::abs\fP (const T &x)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> auto \fBIceBRG::sqrt\fP (const T &x)-> decltype(boost"
.br
.ti -1c
.RI "template<int_type e, typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> auto \fBIceBRG::ipow\fP (const T &x)-> decltype(boost"
.br
.ti -1c
.RI "template<int_type en, int_type ed, typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> auto \fBIceBRG::ipow\fP (const T &x)-> decltype(boost"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> \fBflt_type\fP \fBIceBRG::sin\fP (const T &x)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> \fBflt_type\fP \fBIceBRG::cos\fP (const T &x)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> \fBflt_type\fP \fBIceBRG::tan\fP (const T &x)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> angle_type \fBIceBRG::asin\fP (const T &x)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> angle_type \fBIceBRG::acos\fP (const T &x)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> angle_type \fBIceBRG::atan\fP (const T &y)"
.br
.ti -1c
.RI "template<typename T , typename std::enable_if< boost::units::is_quantity< T >::value, char >::type  = 0, typename std::enable_if<!is_boost_tuple< T >::value, char >::type  = 0> angle_type \fBIceBRG::atan2\fP (const T &y, const T &x=1\&.)"
.br
.ti -1c
.RI "template<class Archive , class T > void \fBboost::serialization::save\fP (Archive &ar, const boost::units::quantity< T > &g, const unsigned int version)"
.br
.ti -1c
.RI "template<class Archive , class T > void \fBboost::serialization::load\fP (Archive &ar, boost::units::quantity< T > &g, const unsigned int version)"
.br
.ti -1c
.RI "template<class Archive , class T > void \fBboost::serialization::serialize\fP (Archive &ar, boost::units::quantity< T > &g, const unsigned int file_version)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const auto \fBIceBRG::meter\fP = boost::units::si::meter"
.br
.ti -1c
.RI "const auto \fBIceBRG::second\fP = boost::units::si::second"
.br
.ti -1c
.RI "const auto \fBIceBRG::kilogram\fP = boost::units::si::kilogram"
.br
.ti -1c
.RI "const auto \fBIceBRG::radian\fP = boost::units::si::radian"
.br
.ti -1c
.RI "const auto \fBIceBRG::m\fP = meter"
.br
.ti -1c
.RI "const auto \fBIceBRG::s\fP = second"
.br
.ti -1c
.RI "const auto \fBIceBRG::kg\fP = kilogram"
.br
.ti -1c
.RI "const auto \fBIceBRG::rad\fP = radian"
.br
.ti -1c
.RI "const auto \fBIceBRG::mps\fP = meter_per_second"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define _BRG_USE_UNITS_"

.SH "Author"
.PP 
Generated automatically by Doxygen for CFHTLenS_Magnification from the source code\&.
