.TH "/disk2/brg/git/Magnification_Public/src/lib/IceBRG_main/vector/elementwise_functions.hpp" 3 "Tue Jul 7 2015" "Version 0.9.0" "CFHTLenS_Magnification" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/disk2/brg/git/Magnification_Public/src/lib/IceBRG_main/vector/elementwise_functions.hpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <algorithm>\fP
.br
\fC#include <cassert>\fP
.br
\fC#include <cstdlib>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <type_traits>\fP
.br
\fC#include <vector>\fP
.br
\fC#include 'IceBRG_main/common\&.h'\fP
.br
\fC#include 'IceBRG_main/container/is_container\&.hpp'\fP
.br
\fC#include 'IceBRG_main/math/misc_math\&.hpp'\fP
.br
\fC#include 'IceBRG_main/math/safe_math\&.hpp'\fP
.br
\fC#include 'IceBRG_main/utility\&.hpp'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBIceBRG\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename f , typename T > T \fBIceBRG::apply\fP (const f &func, T v1)"
.br
.ti -1c
.RI "template<typename f , typename T1 , typename T2 , BRG_F_BOTH_STL(T1, T2) > T1 \fBIceBRG::apply\fP (const f &func, T1 v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename f , typename T1 , typename T2 , BRG_F_FIRST_STL(T1, T2) > T2 \fBIceBRG::apply\fP (const f &func, const T1 &v1, T2 v2)"
.br
.ti -1c
.RI "template<typename f , typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > T1 \fBIceBRG::apply\fP (const f &func, const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T , typename f , typename Tout  = typename std::decay<T>::type, BRG_F_IS_NULL(Tout) > boost::tuples::null_type \fBIceBRG::rand_container_of_size\fP (const f func, const \fBint_type\fP &)"
.br
.ti -1c
.RI "template<typename T , typename f , typename T1 , typename Tout  = typename std::decay<T>::type, BRG_F_IS_NULL(Tout) > boost::tuples::null_type \fBIceBRG::rand_container_of_size\fP (const f func, const T1 &v1, const \fBint_type\fP &)"
.br
.ti -1c
.RI "template<typename T , typename f , typename T1 , typename T2 , typename Tout  = typename std::decay<T>::type, BRG_F_IS_NULL(Tout) > boost::tuples::null_type \fBIceBRG::rand_container_of_size\fP (const f func, const T1 &v1, const T2 &v2, const \fBint_type\fP &)"
.br
.ti -1c
.RI "template<typename f , typename T1 , BRG_F_IS_NULL(T1) > boost::tuples::null_type \fBIceBRG::rand_container\fP (const f func, const T1 &v1)"
.br
.ti -1c
.RI "template<typename f , typename T1 , typename T2 , BRG_F_BOTH_STL(T1, T2) > auto \fBIceBRG::rand_container\fP (const f func, const T1 &v1, const T2 &v2)-> std"
.br
.ti -1c
.RI "template<typename f , typename T1 , typename T2 , BRG_F_IS_NULL(T1) , BRG_F_IS_NULL(T2) > boost::tuples::null_type \fBIceBRG::rand_container\fP (const f func, const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > auto \fBIceBRG::add\fP (const T1 &v1, const T2 &v2)-> decltype(v1+v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > auto \fBIceBRG::subtract\fP (const T1 &v1, const T2 &v2)-> decltype(v1-v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > auto \fBIceBRG::multiply\fP (const T1 &v1, const T2 &v2)-> decltype(v1 *v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > auto \fBIceBRG::divide\fP (const T1 &v1, const T2 &v2)-> decltype(v1/v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > T1 \fBIceBRG::pow\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_FIRST_STL(T1, T2) > T1 \fBIceBRG::pow\fP (T1 v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_SECOND_STL(T1, T2) > T2 \fBIceBRG::pow\fP (const T1 &v1, T2 v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_FIRST_STL(T1, T2) > T1 \fBIceBRG::runtime_ipow\fP (T1 v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_SECOND_STL(T1, T2) > T1 \fBIceBRG::runtime_ipow\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_FIRST_STL(T1, T2) > T1 \fBIceBRG::safe_pow\fP (T1 v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_SECOND_STL(T1, T2) > T2 \fBIceBRG::safe_pow\fP (const T1 &v1, T2 v2)"
.br
.ti -1c
.RI "template<class T1 , class T2 , BRG_F_IS_NULL(T1) , BRG_F_IS_NULL(T2) > boost::tuples::null_type \fBIceBRG::max\fP (const T1 &t1, const T2 &t2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_STL_OR_EIGEN(T1) , BRG_F_IS_STL_OR_EIGEN(T2) > T1 \fBIceBRG::max\fP (T1 &&v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_FIRST_STL(T1, T2) > T1 \fBIceBRG::max\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_FIRST_STL(T1, T2) > T1 \fBIceBRG::max\fP (T1 &&v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_EIGEN(T1) , BRG_F_NOT_CONTAINER(T2) , typename std::enable_if<!IceBRG::is_eigen_container< T2 >::value, char >::type  = 0> T1 \fBIceBRG::max\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_EIGEN(T1) , BRG_F_NOT_CONTAINER(T2) , typename std::enable_if<!IceBRG::is_eigen_container< T2 >::value, char >::type  = 0> T1 \fBIceBRG::max\fP (T1 &&v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NOT_CONTAINER(T1) , BRG_F_IS_STL(T2) > T2 \fBIceBRG::max\fP (const T1 &v1, T2 &&v2)"
.br
.ti -1c
.RI "template<class T1 , class T2 , BRG_F_IS_NULL(T1) , BRG_F_IS_NULL(T2) > boost::tuples::null_type \fBIceBRG::min\fP (const T1 &t1, const T2 &t2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_STL_OR_EIGEN(T1) , BRG_F_IS_STL_OR_EIGEN(T2) > T1 \fBIceBRG::min\fP (T1 &&v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_EIGEN(T1) , BRG_F_NOT_CONTAINER(T2) , typename std::enable_if<!IceBRG::is_eigen_container< T2 >::value, char >::type  = 0> T1 \fBIceBRG::min\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_EIGEN(T1) , BRG_F_NOT_CONTAINER(T2) , typename std::enable_if<!IceBRG::is_eigen_container< T2 >::value, char >::type  = 0> T1 \fBIceBRG::min\fP (T1 &&v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NOT_CONTAINER(T1) , BRG_F_IS_STL(T2) > T2 \fBIceBRG::min\fP (const T1 &v1, T2 &&v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , typename T3 , typename std::enable_if< IceBRG::is_stl_container< T1 >::value||IceBRG::is_eigen_container< T1 >::value||IceBRG::is_stl_container< T2 >::value||IceBRG::is_eigen_container< T2 >::value||IceBRG::is_stl_container< T3 >::value||IceBRG::is_eigen_container< T3 >::value, char >::type  = 0> T2 \fBIceBRG::bound\fP (T1 &&lower_bound, T2 &&a, T3 &&upper_bound)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::negate\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::negate\fP (const T &v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::abs\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::sqrt\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::safe_sqrt\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::exp\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::log\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::square\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::cube\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::quart\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::inverse\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::inv_square\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::inv_cube\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::inv_quart\fP (T v)"
.br
.ti -1c
.RI "template<typename T , BRG_F_IS_STL(T) > T \fBIceBRG::safe_d\fP (T v)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > T1 & \fBIceBRG::add_equal\fP (T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_BOTH_STL(T1, T2) > T1 & \fBIceBRG::add_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > T1 & \fBIceBRG::subtract_equal\fP (T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_BOTH_STL(T1, T2) > T1 & \fBIceBRG::subtract_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > T1 & \fBIceBRG::multiply_equal\fP (T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_BOTH_STL(T1, T2) > T1 & \fBIceBRG::multiply_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_NEITHER_STL(T1, T2) > T1 & \fBIceBRG::divide_equal\fP (T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_BOTH_STL(T1, T2) > T1 & \fBIceBRG::divide_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "const std::vector< bool > \fBIceBRG::v_not\fP (std::vector< bool > v)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_STL(T2) > std::vector< bool > \fBIceBRG::equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::equal\fP (const T2 &v1, const T1 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::not_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_STL(T2) > std::vector< bool > \fBIceBRG::not_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::not_equal\fP (const T2 &v1, const T1 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::less_than\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_STL(T2) > std::vector< bool > \fBIceBRG::less_than\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::less_than\fP (const T2 &v1, const T1 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::greater_than\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_STL(T2) > std::vector< bool > \fBIceBRG::greater_than\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::greater_than\fP (const T2 &v1, const T1 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::less_than_or_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_STL(T2) > std::vector< bool > \fBIceBRG::less_than_or_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::less_than_or_equal\fP (const T2 &v1, const T1 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::greater_than_or_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 , BRG_F_IS_STL(T2) > std::vector< bool > \fBIceBRG::greater_than_or_equal\fP (const T1 &v1, const T2 &v2)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > std::vector< bool > \fBIceBRG::greater_than_or_equal\fP (const T2 &v1, const T1 &v2)"
.br
.ti -1c
.RI "template<typename T > const T \fBIceBRG::v_not\fP (T v)"
.br
.ti -1c
.RI "const bool \fBIceBRG::v_not\fP (const bool v)"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for CFHTLenS_Magnification from the source code\&.
